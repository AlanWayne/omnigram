import asyncio
from typing import TYPE_CHECKING

from aiogram.filters import Command
from aiogram.types import ChatMemberAdministrator, ChatMemberOwner
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # type: ignore
from apscheduler.triggers.cron import CronTrigger  # type: ignore

from .config import config
from .database.config import get_session
from .minecraft import MinecraftServer
from .validators import validate_console, validate_minecraft_chat
from omnigram.database.config import MessageModel
from omnigram.factory.telegram import dispatcher, bot, router

if TYPE_CHECKING:
    from aiogram.types import Message
    from sqlalchemy.orm.session import Session


async def handler() -> None:
    await delete_messages()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        delete_messages,
        CronTrigger(hour=0, minute=0),
    )
    scheduler.start()
    await dispatcher.start_polling(bot)


def save_message(
    message: "Message", session: "Session" = next(get_session())
) -> None:
    user_id = message.from_user.id if message.from_user else None
    item: MessageModel = MessageModel(
        id=message.message_id,
        chat_id=message.chat.id,
        user_id=user_id,
        text=message.text,
        timestamp=message.date,
    )
    session.add(item)
    session.commit()


async def delete_messages(session: "Session" = next(get_session())) -> None:
    messages = (
        session.query(MessageModel)
        .filter(MessageModel.deleted.is_(False))
        .all()
    )

    for message in messages:
        try:
            await bot.delete_message(
                chat_id=int(message.chat_id), message_id=int(message.id)
            )
        except Exception as e:
            print("Message delete:", e)

    session.query(MessageModel).filter(~MessageModel.deleted).update(
        {MessageModel.deleted: True}
    )
    session.commit()


@router.message(Command("help"))
@validate_console()
async def command_help(message: "Message") -> None:
    response = await message.answer(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/launch ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Singleton, —Ç–∞–∫ —á—Ç–æ"
        " –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –æ—à–∏–±–æ–∫ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ;\n"
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä;\n"
        "/list ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π, –∏–≥—Ä–∞—é—â–∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç"
        ";\n"
        "/terminate ‚Äî –≤—ã–∫–ª—é—á–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä (—Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞);\n"
        "/clear ‚Äî —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ;\n"
        "/help ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥;"
    )
    save_message(message)
    save_message(response)


@router.message(Command("launch"))
@validate_console()
async def command_launch(message: "Message") -> None:
    response1 = await message.answer(
        "‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –æ–∂–∏–¥–∞–π—Ç–µ..."
    )
    minecraft_server = MinecraftServer()
    minecraft_server.launch()
    await asyncio.sleep(6)
    response2 = await message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!")

    save_message(message)
    save_message(response1)
    save_message(response2)


@router.message(Command("terminate"))
@validate_console()
async def command_terminate(message: "Message") -> None:
    if message.from_user:
        user = await bot.get_chat_member(message.chat.id, message.from_user.id)

        if isinstance(user, (ChatMemberAdministrator, ChatMemberOwner)):
            response1 = await message.answer(
                "‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
            )
            minecraft_server = MinecraftServer()
            await minecraft_server.terminate()
            response2 = await message.answer("‚úÖ –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")

            save_message(response1)
            save_message(response2)

        else:
            response = await message.answer(
                "‚ö†Ô∏è –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
            )

            save_message(response)
    else:
        response = await message.answer(
            "‚ö†Ô∏è –£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
        )

        save_message(response)

    save_message(message)


@router.message(Command("status"))
@validate_console()
async def commant_status(message: "Message") -> None:
    minecraft_server = MinecraftServer()
    response = await message.answer(
        f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {minecraft_server.status()}"
    )

    save_message(message)
    save_message(response)


@router.message(Command("list"))
@validate_console()
async def command_list(message: "Message") -> None:
    minecraft_server = MinecraftServer()

    if minecraft_server.status().startswith("Active"):
        output = await minecraft_server.list()

        if output == "0" or output is None:
            response = await message.answer("üëª –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –ø—É—Å—Ç.")

        else:
            response = await message.answer(
                f"‚úÖ –ò–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {output}."
            )

    else:
        response = await message.answer(
            "‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
        )

    save_message(message)
    save_message(response)


@router.message(Command("clear"))
@validate_console()
async def command_clear(message: "Message") -> None:
    await delete_messages()
    await message.delete()


@router.message()
async def not_a_command(message: "Message") -> None:
    if message.message_thread_id == config.telegram.topic_mc_console:
        return await command_invalid(message=message)
    elif message.message_thread_id == config.telegram.topic_mc_minecraft_chat:
        return await minecraft_chat_listener(message=message)


@validate_minecraft_chat()
async def minecraft_chat_listener(message: "Message") -> None:
    if message.from_user is not None:
        user = message.from_user.full_name
        text = message.text

        if text is not None:
            minecraft_server = MinecraftServer()
            if minecraft_server.status().startswith("Active"):
                await minecraft_server.send_message_to_minecraft(
                    user=user, text=text
                )
            else:
                await message.answer("‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")


@validate_console()
async def command_invalid(message: "Message") -> None:
    response = await message.answer(
        f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã"
        f"–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )

    save_message(message)
    save_message(response)
